,Q1.1,Q1.1_5_TEXT,Q1.2,Q1.3,Q2.1.1_1,Q2.1.1_2,Q2.1.1_3,Q2.1.1_4,Q2.1.1_5,Q2.1.2_1,Q2.1.2_2,Q2.1.2_3,Q2.1.2_4,Q2.1.2_5,Q2.1.2_6,Q2.1.2_7,Q2.1.2_8,Q2.1.2_9,Q2.1.3_1,Q2.1.3_2,Q2.1.3_3,Q2.1.3_4,Q2.1.3_5,Q2.1.3_6,Q2.1.3_7,Q2.1.3_8,Q2.2,Q2.3
0,Which of the following roles describes you the best? - Selected Choice,Which of the following roles describes you the best? - Others? Please specify. - Text,How many years of professional experience of software development do you have?,How many years of experience of fuzzing do you have?,Please rate how often you encounter the following challenges during fuzzing. - Incompability between the fuzzing environment and the project leads to build failures.,Please rate how often you encounter the following challenges during fuzzing. - Different fuzzing environments lead to unstable/unreliable results.,Please rate how often you encounter the following challenges during fuzzing. - The fuzzer is missing desired functionalities/features.,"Please rate how often you encounter the following challenges during fuzzing. - The fuzzing process takes too much time or resources (e.g., memory, CPU, disk spaces).",Please rate how often you encounter the following challenges during fuzzing. - The fuzzer has scalability issues when facing large inputs/fuzzing targets/corpora.,Please rate how often you encounter the following challenges during fuzzing. - Bad fuzzing targets lead to fuzzing failures or inconsistent results.,Please rate how often you encounter the following challenges during fuzzing. - Issues with the fuzzing code lead to crashes/build failures.,Please rate how often you encounter the following challenges during fuzzing. - Bugs in the fuzzer lead to build failures or abnormal/inconsistent fuzzing behaviors.,Please rate how often you encounter the following challenges during fuzzing. - Incorrect use of the corpus leads to fuzzing failures or low coverage.,Please rate how often you encounter the following challenges during fuzzing. - Issues with the build tools or external dependencies lead to crash/build failures.,Please rate how often you encounter the following challenges during fuzzing. - Issues in the corpus lead to build failures or unreliable results.,"Please rate how often you encounter the following challenges during fuzzing. - Fuzzer inputs cause unusual crashes or issues (e.g., crashes or reboots the server).",Please rate how often you encounter the following challenges during fuzzing. - Issues when trying to save or re-use the corpus.,Please rate how often you encounter the following challenges during fuzzing. - Difficulties trying to reproduce build failures or bugs detected during fuzzing.,Please rate how often you encounter the following challenges during fuzzing. - Difficulties generating the correct inputs or targeting specific parts of the software.,"Please rate how often you encounter the following challenges during fuzzing. - Difficulties in setting up, building or using the fuzzer.",Please rate how often you encounter the following challenges during fuzzing. - Documentation on how to use the fuzzer is missing or insufficient.,Please rate how often you encounter the following challenges during fuzzing. - Output messages generated by the fuzzer are missing/confusing/unhelpful.,"Please rate how often you encounter the following challenges during fuzzing. - Overloading outputs lead to difficulties to focus on specific issues (e.g., too many bugs reported at once makes it difficult to focus on a specific issue).","Please rate how often you encounter the following challenges during fuzzing. - Bad code design limits the ability to fuzz (e.g., global variables being de-globalized in the source code can break the fuzzing code).",Please rate how often you encounter the following challenges during fuzzing. - Difficulties writing or understanding fuzzing code.,"Please rate how often you encounter the following challenges during fuzzing. - Difficulties in deciding which part of the software to fuzz (e.g., should legacy code be fuzzed, should all modules be fuzzed, etc...).","Please specify other challenges you have encountered during fuzzing, if not mentioned above. (optional)","How can the fuzzing process be improved (e.g., developing specialized tools, methodologies)? (optional)"
1,Technical Lead,,>10 years,< 3,Never,Never,Sometimes,Sometimes,Sometimes,Never,Never,Never,Never,Never,Never,Never,Never,Never,Rarely,Rarely,Rarely,Never,Never,Sometimes,Rarely,Rarely,lack of support of continuous fuzzing from ci systems,
2,Developer,,>10 years,6-10 years,Never,Never,Never,Never,Never,Never,Never,Rarely,Rarely,Never,Never,Never,Never,Rarely,Never,Never,Rarely,Never,Never,Rarely,Never,Never,I think Fuzzing is the easiest and most fool proof way of ensuring quality when programming in languages like C and C++.,I have nothing to offer here.
3,Developer,,>10 years,6-10 years,Often,Sometimes,Sometimes,Sometimes,Sometimes,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Never,Never,Sometimes,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Dealing with the volume of findings can be challenging,
4,Test Analyst/Tester/Test Engineer,,3-5 years,3-5 years,Rarely,Rarely,Rarely,Sometimes,Often,Rarely,Rarely,Rarely,Rarely,Rarely,Never,Never,Never,Rarely,Often,Rarely,Rarely,Rarely,Never,Often,Rarely,Sometimes,"Writing a good fuzz target is hard, because it requires domain knowledge ","Having a manual fuzz input editor, to allow developers with domain knowledge to smartly modify fuzz inputs to reach new code"
5,Others? Please specify.,Scientific researcher,< 3,< 3,Rarely,Never,Rarely,Often,,Rarely,,Always,Rarely,Sometimes,,Never,Never,Sometimes,Often,Sometimes,Sometimes,Sometimes,Rarely,,Never,Rarely,,
6,Technical Lead,,>10 years,6-10 years,Never,Never,Rarely,Rarely,,Rarely,Never,Never,Rarely,Never,Never,Never,Rarely,Sometimes,Sometimes,Never,Never,Never,Never,Sometimes,Rarely,Never,,integration in build tools and/or IDEs would probably be helpful.
7,Developer,,>10 years,3-5 years,Rarely,Rarely,Sometimes,Sometimes,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Rarely,Never,Never,Rarely,Sometimes,Rarely,Sometimes,Rarely,Sometimes,Sometimes,Rarely,Sometimes,,"documentation, examples"
8,Developer,,3-5 years,3-5 years,Sometimes,Sometimes,Never,Sometimes,Sometimes,Never,Never,Never,Never,Sometimes,Rarely,Never,Never,Never,Sometimes,Sometimes,Rarely,Rarely,Never,Sometimes,Rarely,Rarely,,
9,Developer,,3-5 years,< 3,Never,,Rarely,,Rarely,,,,,,,,,,,,,,,,,,,
10,Developer,,6-10 years,< 3,Sometimes,Never,Often,Sometimes,Sometimes,Often,Sometimes,Never,Rarely,Rarely,Rarely,Never,Never,Sometimes,Sometimes,Rarely,Never,Sometimes,Rarely,Often,Often,Rarely,,
11,Developer,,>10 years,3-5 years,Often,Often,Rarely,Rarely,Rarely,Rarely,Never,Never,Sometimes,Never,Never,Never,Sometimes,Often,Sometimes,Sometimes,Sometimes,Often,Rarely,Sometimes,Rarely,Sometimes,,
12,Technical Lead,,>10 years,>10 years,Sometimes,Often,Rarely,Sometimes,Always,Sometimes,Rarely,Often,Rarely,Sometimes,Rarely,Never,Often,Rarely,Rarely,Often,Rarely,Sometimes,Rarely,Rarely,Rarely,Never,"With afl, I end up having to start from scratch every cycle. It would be nice if it were easier to minimize while Iâ€™m fixing issues and then have a fast start based on the previous cycle. Plus I sometimes have to recompile to work with other tools, like valgrind or gdb ","background minimization

fast start based on previous cycle

more porcelain tooling, we just get the plumbing today and I have a bunch of ad hoc support scripts now"
13,Developer,,>10 years,6-10 years,Sometimes,Sometimes,Sometimes,Often,Often,,Sometimes,Rarely,Sometimes,Sometimes,Sometimes,Sometimes,Sometimes,Rarely,Always,Sometimes,Sometimes,Sometimes,Sometimes,Never,Sometimes,Often,,"Allocating time and resources for continued fuzzing is difficult; ideally tooling would make it easy for e.g. all developers on a project to contribute to fuzzing at a low-level, rather than occupying dedicated machines for brief but intense periods of fuzzing.  Aside from other usability issues, that seems to be a central problem of implementing fuzzing: after it is initially implemented, it often doesn't get run regularly.

It would also be nice to have some intersection with coverage metrics -- some tools probably have this now, but I haven't seen it in practice myself -- so the tooling could suggest interfaces that could be fuzzed; for example, places in the code where network input is read but which haven't already been covered by the existing fuzzing code."
14,Developer,,3-5 years,< 3,Sometimes,Rarely,Rarely,Always,Always,Sometimes,Always,Always,Rarely,Often,Never,Never,Sometimes,Often,Rarely,Always,Always,Sometimes,Never,Never,Never,Often,,
15,Technical Lead,,>10 years,6-10 years,Sometimes,Rarely,Rarely,Never,Rarely,Never,Never,Never,Rarely,Often,Never,Rarely,Rarely,Rarely,Often,Often,Often,Rarely,Sometimes,Sometimes,Rarely,Rarely,,"joining the unit test frameworks with fuzzing.

for instance, adding a unit test, marking one parameter as fuzzable. the framework could then run that ""unit test"" with a fuzzer.
that would lower the barrier for developers to join in on fuzzing, instead of having dedicated persons writing fuzzers."
16,Technical Lead,,>10 years,3-5 years,Often,Often,Often,Often,Often,Rarely,Rarely,Rarely,Rarely,Sometimes,Rarely,Rarely,Sometimes,Sometimes,Always,Always,Always,Often,Often,Rarely,Often,Often,"Cross platform use of fuzzers. E.g. if a development team primarily targets windows, the available fuzzing tools for windows are very lacking and hard to use.",
17,Test Analyst/Tester/Test Engineer,,< 3,< 3,Rarely,Sometimes,Sometimes,Rarely,Sometimes,,,,,,,,,,,,,,,,,,,
18,Others? Please specify.,security researcher,>10 years,3-5 years,Often,Sometimes,Sometimes,Sometimes,Always,Often,Sometimes,Sometimes,Sometimes,Often,Often,Often,Often,Often,Often,Sometimes,Sometimes,Sometimes,Often,Often,Often,Often,"replicating crashes is a major issue.
triaging them is another big issue.","need better crash triage tools.
need fuzzers which incorporates latest tools and techniques like symbolic fuzzing etc.
platform independent fuzzing"
19,Developer,,>10 years,< 3,Rarely,Sometimes,Often,Sometimes,Rarely,Sometimes,Rarely,Sometimes,Sometimes,Sometimes,,Rarely,,Sometimes,Often,Often,Often,Sometimes,Rarely,Rarely,Sometimes,Rarely,,"When an issue is detected, I would love to see the minimal standalone code example with minimal dependencies to recreate it. "
20,Developer,,>10 years,< 3,Sometimes,Often,Often,Always,Often,Often,Sometimes,Rarely,Rarely,Often,Rarely,Rarely,Rarely,Often,Often,Often,Often,Sometimes,Rarely,Often,Rarely,Always,,
21,Developer,,6-10 years,3-5 years,Rarely,Never,Rarely,Sometimes,Sometimes,,Rarely,Rarely,,Rarely,,Never,Never,Sometimes,Sometimes,Often,Rarely,Sometimes,Rarely,Never,Sometimes,Rarely,,
22,Developer,,>10 years,< 3,Sometimes,Sometimes,Rarely,Often,Sometimes,Sometimes,Rarely,Never,Sometimes,Rarely,Never,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Sometimes,Sometimes,,,Rarely,,
23,Technical Lead,,6-10 years,< 3,Often,Rarely,Often,Sometimes,Rarely,Rarely,Rarely,Rarely,Sometimes,Often,Rarely,Often,Rarely,Rarely,Often,Often,Often,Sometimes,Rarely,Often,Always,Always,,
24,Technical Lead,,>10 years,>10 years,Rarely,Sometimes,Often,Often,Often,Sometimes,Rarely,Sometimes,Often,Sometimes,Rarely,Rarely,Rarely,Rarely,Sometimes,Sometimes,Often,Sometimes,Often,Sometimes,Sometimes,Sometimes,,
25,Others? Please specify.,bug hunter,6-10 years,3-5 years,Sometimes,Often,Rarely,Always,Always,Often,Rarely,Rarely,Always,Always,Always,Never,Often,Often,Always,Sometimes,Rarely,Never,Rarely,Never,Never,Rarely,"You are try to fuzz open source softwares. I also write fuzzer for closed-source softwares. There are many different things. Writing a harness for a closed-source software (or library, for example: .so or .dll) is very challenging.",
26,Others? Please specify.,Penetration Tester,6-10 years,3-5 years,Often,Always,Sometimes,Rarely,Often,Rarely,Sometimes,Rarely,Sometimes,Sometimes,Sometimes,Often,Rarely,Rarely,Always,Always,Always,Often,,,Rarely,Never,Fuzzing involves getting build systems to work. Build systems are the devil.,"The main problem is, how do we find higher level bugs when the memory corruption rain dries up?"
27,Others? Please specify.,other,6-10 years,3-5 years,Sometimes,Sometimes,Often,Often,Always,Always,Sometimes,Rarely,Often,Rarely,Never,Sometimes,Never,Often,Always,Rarely,Sometimes,Sometimes,Often,Sometimes,Rarely,Often,,"developing specialized tools, structure-aware fuzzing"
28,Others? Please specify.,Security researcher,6-10 years,3-5 years,Sometimes,Rarely,Sometimes,Sometimes,Rarely,Rarely,Rarely,Sometimes,Often,Never,Never,Never,Never,Often,Always,Rarely,Sometimes,Rarely,Often,Often,Always,Often,"cannot reproduce fuzzing target's crash (need more work for triaging phase), specific fuzzer component's documentation is not provided",developing specialized tools (in many cases)
29,Others? Please specify.,All of the above,>10 years,6-10 years,Often,Sometimes,Always,Rarely,Sometimes,Often,Sometimes,Sometimes,Often,Sometimes,Sometimes,Rarely,Rarely,Rarely,Often,Sometimes,Sometimes,Rarely,Rarely,Rarely,Sometimes,Sometimes,,
30,Developer,,>10 years,< 3,Sometimes,Sometimes,Sometimes,Sometimes,Sometimes,Sometimes,Never,Never,Often,Never,Never,Never,Rarely,Rarely,Sometimes,Sometimes,Often,Sometimes,Never,Rarely,Often,Often,,
31,Developer,,>10 years,< 3,Never,Never,Rarely,Often,Rarely,Rarely,Rarely,Never,Sometimes,Never,Never,Never,Never,Rarely,Sometimes,Rarely,Often,Sometimes,,Often,Sometimes,Sometimes,,Integration of fuzzing with the environment (like Go has done) is key to increasing its adoption and ease of use.
32,Others? Please specify.,Vulnerability Researcher,>10 years,< 3,Always,Often,Sometimes,Sometimes,Sometimes,Rarely,Never,Sometimes,Rarely,Always,Rarely,Sometimes,Often,Often,Sometimes,Rarely,Sometimes,Rarely,Often,Never,Never,Sometimes,,
33,Developer,,6-10 years,< 3,Rarely,Sometimes,Often,Often,Often,Rarely,Rarely,Rarely,Sometimes,Rarely,Sometimes,Often,Sometimes,Sometimes,Sometimes,Often,Often,Sometimes,Rarely,Often,Rarely,Often,,
34,Others? Please specify.,Security Researcher,6-10 years,3-5 years,Often,Rarely,Sometimes,Sometimes,Rarely,Often,Rarely,Rarely,Rarely,Often,Rarely,Often,Rarely,Sometimes,Always,Often,Sometimes,Rarely,Never,Often,Never,Rarely,'- Fuzzing stateful protocols,"'- LibAFL! A high-quality framework for fuzzing solves a lot of the challenges, like reproducibility, scalability. Example usage: https://github.com/tlspuffin/tlspuffin"
35,Developer,,6-10 years,3-5 years,Often,Sometimes,Rarely,Rarely,Rarely,Often,Often,Rarely,Never,Often,Sometimes,,Rarely,Rarely,Rarely,Sometimes,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,,
36,Developer,,6-10 years,3-5 years,Never,,Rarely,Never,Sometimes,,Never,,Often,Rarely,Never,Rarely,Never,Never,Sometimes,Never,Rarely,Rarely,Sometimes,Never,Never,Never,"Improvements made by academia not reaching production - e.g. https://arxiv.org/abs/1803.01307 and https://github.com/AngoraFuzzer/Angora only targets an old LLVM version, making it nearly unusable in practice.","In statically typed, memory-safe languages (Rust, Java, etc) it should be possible to auto-generate fuzzing harnesses for large API surfaces, where it is impractical to write fuzzing targets by hand.
This in turn opens the door for fuzzing C/C++ libraries with large API surfaces through their Rust bindings. OpenSSL's API surface could be easily fuzzed that way.

I've experimented with this in https://github.com/rust-fuzz/auto-fuzz-test but didn't get it to a production-ready state. https://sat-group.github.io/ruben/media/pldi21-syrust.pdf which took a more sophisticated approach also never reached production."
37,Developer,,>10 years,3-5 years,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Rarely,Never,Sometimes,Always,Rarely,Rarely,Rarely,Sometimes,Rarely,Rarely,Never,Never,Rarely,Often,Rarely,Often,,
38,Technical Lead,,>10 years,3-5 years,Rarely,Rarely,Often,Sometimes,Sometimes,Rarely,Rarely,Rarely,Often,Rarely,Rarely,Rarely,Rarely,Sometimes,Often,Sometimes,Rarely,Rarely,Rarely,Sometimes,Rarely,Sometimes,,
39,Sotware Architect,,>10 years,< 3,Often,Often,Often,Sometimes,Sometimes,Sometimes,Often,Rarely,Rarely,Often,Rarely,Rarely,Sometimes,Often,Sometimes,Always,Rarely,Sometimes,Always,Sometimes,Often,Rarely,Build is the problem.,
40,Technical Lead,,6-10 years,6-10 years,Rarely,Sometimes,Always,Always,Sometimes,,,,,,,,,,,,,,,,,,,
41,Technical Lead,,6-10 years,3-5 years,Sometimes,Often,Sometimes,Rarely,Rarely,Often,Often,Sometimes,Often,Sometimes,Often,Sometimes,Sometimes,Rarely,,,,,,,,,,
42,Technical Lead,,>10 years,3-5 years,Often,Sometimes,Sometimes,Sometimes,Sometimes,,,,,,,,,,,,,,,,,,,
43,Technical Lead,,>10 years,3-5 years,Rarely,Rarely,Often,Often,Sometimes,Often,Often,Sometimes,Rarely,Sometimes,Rarely,Sometimes,Never,Often,Sometimes,Often,Never,Never,Rarely,Often,Sometimes,Sometimes,"Difficulty fuzzing internal boundaries in software (in our product, we assume attacker might successfully take over part of the product, but we still don't want them to reach other parts, so fuzzing these internal boundaries is crucial). Reason: monolithic design, assumptions about intended behavior","Trivial integration of snapshot fuzzing into coverage-guided, simple-to-write fuzzers along the lines of libfuzzer"
44,Technical Lead,,>10 years,>10 years,Sometimes,Often,Sometimes,Often,Rarely,Always,Sometimes,Sometimes,Often,Rarely,Rarely,Often,Never,Often,Often,Rarely,Rarely,Rarely,Sometimes,Always,Rarely,Always,"We develop most of our fuzzing tools ourselves, so our main issues is with the target code, not the fuzzer itself. The main issues are:

* Insufficient segmentation/separation of the target code (cannot easily carve out parts to test, many tests must be done on the full system)
* Fuzzing finds low priority edge cases that have no priority for developers but also block the fuzzing process (in particular pathological OOMs are an issue).
* Guided instrumentation from tools like libFuzzer cannot be restricted at runtime. With a huge codebase, a specific fuzzer can easily be mislead into the ""wrong"" target code.",* Runtime target selection for coverage guided tools would be a great improvement
45,Technical Lead,,6-10 years,< 3,Often,Often,Often,Rarely,Sometimes,,,,,,,,,,,,,,,,,,,
46,Developer,,6-10 years,< 3,Often,Rarely,Sometimes,Always,Always,Sometimes,Sometimes,Sometimes,Rarely,Sometimes,Sometimes,Rarely,Often,Often,,,,,,,,,,
47,Developer,,>10 years,6-10 years,Often,Often,Rarely,Sometimes,Rarely,,Rarely,Never,Sometimes,Rarely,Sometimes,Never,Rarely,Rarely,Sometimes,Rarely,Sometimes,Rarely,Never,Never,Rarely,Rarely,,
48,Developer,,>10 years,3-5 years,Rarely,Rarely,,Never,,,,,,,,,,,,,,,,,,,,
49,Developer,,>10 years,3-5 years,Sometimes,Sometimes,Often,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Rarely,Rarely,Sometimes,Rarely,Rarely,,,,,,,,,,
50,Developer,,3-5 years,< 3,Rarely,Sometimes,Sometimes,Often,Often,Sometimes,Rarely,Never,Often,Rarely,Often,Never,,,Always,Often,Sometimes,Rarely,Often,Sometimes,Rarely,Rarely,,
51,Developer,,6-10 years,< 3,Rarely,Rarely,Often,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Never,Never,Never,Sometimes,Sometimes,Often,Sometimes,Sometimes,Sometimes,Rarely,Rarely,Sometimes,Often,,
52,Others? Please specify.,Academic researcher,3-5 years,3-5 years,Often,Often,Sometimes,Rarely,Rarely,,,,,,,,,,,,,,,,,,,
53,Developer,,>10 years,< 3,Often,Often,Often,Sometimes,Sometimes,,,,,,,,,,,,,,,,,,,
54,Others? Please specify.,Security Engineer / Researcher,>10 years,6-10 years,Sometimes,Sometimes,Rarely,Rarely,Sometimes,,,,,,,,,,,,,,,,,,,
55,Developer,,3-5 years,< 3,Often,Often,Often,Often,Rarely,,,,,,,,,,,,,,,,,,,
56,Others? Please specify.,security researcher,< 3,< 3,Often,Always,Always,Always,Always,,,,,,,,,,,,,,,,,,,
57,Developer,,< 3,< 3,Often,Sometimes,Sometimes,Often,Always,,,,,,,,,,,,,,,,,,,
58,Technical Lead,,>10 years,< 3,Rarely,Never,Never,Never,Never,Never,Never,Never,Never,Sometimes,Never,Never,Never,Rarely,Rarely,Rarely,Rarely,Never,Never,Never,Rarely,Often,,Guidance on which parts of the software to fuzz would be very helpful. 
59,Others? Please specify.,engineering manager,>10 years,< 3,Always,,Always,Rarely,Often,,,,,,,,,,,,,,,,,,,
60,Developer,,3-5 years,< 3,Never,Never,Always,Always,Always,,,,,,,,,,,,,,,,,,,
61,Technical Lead,,>10 years,3-5 years,Rarely,Sometimes,Rarely,Often,Sometimes,Rarely,Rarely,Never,Rarely,Rarely,Never,Rarely,Sometimes,Sometimes,Rarely,Rarely,Sometimes,Sometimes,Rarely,Never,Never,Never,,
62,Developer,,>10 years,< 3,Sometimes,Rarely,Often,Sometimes,Sometimes,Sometimes,Rarely,Rarely,Often,Sometimes,Sometimes,Rarely,Rarely,Sometimes,Sometimes,Sometimes,Sometimes,Often,Sometimes,Rarely,Rarely,Sometimes,,
63,Test Analyst/Tester/Test Engineer,,3-5 years,3-5 years,Never,Rarely,Always,Rarely,Never,Never,Rarely,Never,Never,Never,Never,Rarely,Rarely,Always,Often,Rarely,Rarely,Often,Always,Rarely,Rarely,Often,"Well I already mentioned in the survey, I would like to emphasize once again that the most difficult part of fuzzing is to reproduce failures/bugs. Specifically, I usually focus on large system softwares such as the Linux kernel, the Android platform (AOSP) and hypervisors (e.g., QEMU).
In those system softwares, it is very common that it is hard to reproduce detected failures, and developers need to spend lots of time to understand what happend.",I will be happy if one devises a method/tool to reproduce detected failures.
64,Others? Please specify.,Researcher,>10 years,3-5 years,Sometimes,Often,Rarely,Sometimes,Sometimes,Sometimes,Never,Never,Sometimes,Often,Sometimes,Rarely,Often,Often,Sometimes,Rarely,Sometimes,Never,Never,,,Sometimes,,
65,Others? Please specify.,Security Engineer/Architect,6-10 years,3-5 years,Often,Rarely,Often,Rarely,Often,Sometimes,Rarely,Rarely,Often,Rarely,Never,Rarely,Sometimes,Sometimes,Sometimes,Sometimes,Often,Sometimes,Rarely,Rarely,Sometimes,Sometimes,,"There's an effort currently to create generic fuzzers that touch upon a lot of categories. I'd focus on a smaller, maybe niche area, and create pretty good fuzzing primitives that can be then put together on a per-project basis. "
66,Test Analyst/Tester/Test Engineer,,3-5 years,3-5 years,Always,Always,Always,Always,Always,Always,Always,Always,Always,Always,Always,Always,Always,Always,Often,Often,Sometimes,Sometimes,Often,Sometimes,Sometimes,Sometimes,,
67,Technical Lead,,>10 years,< 3,Rarely,Rarely,Sometimes,Rarely,Rarely,Rarely,Rarely,Rarely,Never,Never,Never,Never,Never,Rarely,Sometimes,Sometimes,Sometimes,Rarely,Rarely,Never,Never,Never,,"Our projet's fuzzing is hosted by OSS-Fuzz (Google-maintained infrastructure), which helps a lot on many of the issues mentioned in this survey. Setting up a fuzzing infrastructure from scratch must be a daunting task.
"
68,Technical Lead,,>10 years,3-5 years,Sometimes,Never,Never,Sometimes,Never,Sometimes,Often,Never,Sometimes,Never,Sometimes,Never,,Sometimes,Often,Sometimes,Rarely,Sometimes,Often,Often,Rarely,Rarely,"Developing a workable fuzzing technique was actually a research project by itself! Once that was over, fuzzing became a viable testing strategy, but we spent quite some time coming up with a solution.",
69,Others? Please specify.,DevOps engineer/Hobbyist,3-5 years,< 3,Rarely,Sometimes,Sometimes,Rarely,Sometimes,Often,Rarely,Never,Often,Sometimes,,Rarely,Rarely,,Often,Often,Often,Rarely,Sometimes,Sometimes,Often,Often,"Hard to set up on larger scale by yourself (no widely used kubernetes setups, GitLab gates their fuzzing feature behind their most expensive tier, GitHub doesn't even have something like this, Google operates OssFuzz as SaaS)","Probably better visualization around code coverage (especially branch coverage) so it is more clear what actually gets tested and what doesn't.
More focus on reducers, to get easier to understand failing test cases.
Better integration into unit test frameworks to make clear to developers that there is a whole big input space out there to be explored."
70,Technical Lead,,>10 years,6-10 years,Sometimes,Sometimes,Rarely,Rarely,Sometimes,Rarely,Sometimes,Rarely,Rarely,Rarely,Rarely,Never,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,"The major issue we've had is in the automatic bug reporting systems. oss-fuzz, for example, will send us bug reports even when the error is clearly in a library we are using and not in our code. Reports should go to the project which owns the code that failed.","It would be very helpful if rules could be set which used a pattern match on the stack trace to decide where bug reports should be submitted. valgrind has something a little like this, for example. We've suggested this feature to google several times, but nothing has happened yet."
71,Developer,,>10 years,< 3,Sometimes,Rarely,,Never,Never,Rarely,Sometimes,Never,Often,Sometimes,Rarely,Never,Rarely,Sometimes,Never,Rarely,Often,Rarely,Never,Often,Never,Sometimes,,
72,Developer,,< 3,< 3,Often,Always,Often,Sometimes,Always,Often,Often,Often,Sometimes,Sometimes,Often,Often,Rarely,Rarely,Rarely,Rarely,Often,Sometimes,Sometimes,Often,Sometimes,Sometimes,,
73,Developer,,>10 years,3-5 years,Often,Sometimes,Sometimes,Sometimes,Rarely,Often,Rarely,Rarely,Often,Always,Rarely,Sometimes,Rarely,Rarely,Often,Sometimes,Often,Rarely,Often,Often,Sometimes,Always,,Make it native to the language (like Go).
74,Others? Please specify.,Security Engineer ,6-10 years,3-5 years,Often,Rarely,Sometimes,Rarely,Sometimes,Often,Rarely,Rarely,Often,Often,Sometimes,Never,Never,Sometimes,Often,Always,Never,Rarely,Rarely,Often,Sometimes,Rarely,,
75,Technical Lead,,>10 years,< 3,Never,Never,Often,Sometimes,Sometimes,Sometimes,Often,Sometimes,,Never,,Sometimes,Rarely,Often,Often,Often,Often,Often,Sometimes,Often,Often,Sometimes,"We are fuzzing a programming language. It gets increasingly harder to generate input for the parser, checker, and compiler, i.e harder to generate syntactically and semantically valid programs to reach high coverage in all components ","We need anything platforms that assist us in the whole fuzzing lifecycle: setup and continuously run fuzzing, alert about findings, rerun fuzzing when fix is available.

We need better tooling/frameworks to generate better fuzzing inputs (structured fuzzing)"
76,Others? Please specify.,Researcher,3-5 years,< 3,Often,Often,Often,Sometimes,Often,Sometimes,Sometimes,Often,Sometimes,Sometimes,Sometimes,Rarely,Always,Sometimes,Often,Often,Always,Often,Always,Rarely,Often,Rarely,,
77,Developer,,3-5 years,< 3,Sometimes,Rarely,Rarely,Rarely,Often,Rarely,Rarely,Often,Sometimes,Often,Rarely,Never,Never,Never,Sometimes,Always,Sometimes,Sometimes,Sometimes,Sometimes,Never,Sometimes,,
78,Developer,,>10 years,>10 years,Always,Rarely,Sometimes,Sometimes,Always,Sometimes,Often,Sometimes,Always,Often,Rarely,Sometimes,Often,Often,Often,Often,Sometimes,Often,Never,Sometimes,Rarely,Often,,"Don't stop after finding a single crashing test case. If I set up the fuzzer to run, it should run forever and collect as many crashing test cases as possible"
79,Technical Lead,,6-10 years,3-5 years,Sometimes,Often,Often,Rarely,Rarely,Often,Rarely,Rarely,Sometimes,Often,Sometimes,Rarely,Never,Often,Sometimes,Rarely,Rarely,Rarely,Often,Often,Rarely,Often,,
80,Others? Please specify.,Security Researcher,>10 years,6-10 years,Rarely,Sometimes,Sometimes,Rarely,Often,Rarely,Rarely,Rarely,Often,Sometimes,Rarely,Never,Rarely,Sometimes,Often,Rarely,Rarely,Sometimes,Rarely,Always,Sometimes,Rarely,,
81,Sotware Architect,,>10 years,3-5 years,Sometimes,Often,Often,Sometimes,Always,Often,Often,Often,Often,Often,Often,Sometimes,Rarely,Often,Often,Rarely,Sometimes,Always,Often,Often,Rarely,Sometimes,,
82,Developer,,< 3,< 3,Sometimes,Often,Often,Rarely,Often,Sometimes,Rarely,Sometimes,Always,Rarely,Never,Rarely,Rarely,Rarely,Always,Sometimes,Sometimes,Sometimes,Rarely,Sometimes,Sometimes,Rarely,,
83,Others? Please specify.,Researcher.,>10 years,6-10 years,Sometimes,,Often,Rarely,Rarely,Sometimes,Rarely,Never,Never,Rarely,Rarely,Rarely,Never,Sometimes,Often,Often,Rarely,Rarely,Sometimes,Rarely,Rarely,Rarely,,
84,Sotware Architect,,>10 years,3-5 years,Rarely,Often,Often,Sometimes,Sometimes,Sometimes,Rarely,Sometimes,Sometimes,Sometimes,Rarely,Rarely,Never,Sometimes,,,,,,,,,,"We need a Plug and play tool that can fuxx existing repositories without hustle, with minimal deps and consistency."
85,Developer,,>10 years,3-5 years,Rarely,Rarely,Sometimes,,,,Rarely,Rarely,,Rarely,,,,Sometimes,Often,Rarely,Rarely,Rarely,Sometimes,Rarely,Rarely,Sometimes,"'- Almost all my experience with fuzzing comes from using Google OSS-Fuzz, so a lot of things are hidden for me and I had no clues answering those question (no idea about the efficiency of fuzzing, or if servers are unstable, etc.)
- Knowing if a fuzzer manages to executes some parts of the code is hard. There isn't for example any easy way to get the code coverage, by simply navigation URLs with OSS-Fuzz. At least as fas as I can see
- Sometimes bugs are hard to reproduce because the code fuzzed has FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION specific code parts, and when trying to reproduce, it is easy to forget that one has to rebuild one's current development version with it
- ossfuzz reported bugs are sometimes impossible to reproduce locally. I suspect most of those come from RAM fragmentation when running repeatedly code that does dynamic memory allocation that can't be seen by one time invokation
- That said, my overall experience with ossfuzz is quite good. Having something that is managed (managed server, nightly builds, automatical ticket filing and closing, etc) and only requires my attention when bugs are filed makes fuzzing, which would be otherwise a painful & time intensive experience (at least for people who aren't professionals of software security but just try to make their software secure), a reasonably good one.",
86,Developer,,6-10 years,3-5 years,Often,Always,Often,Always,Always,Sometimes,Sometimes,Sometimes,Rarely,Often,Rarely,Rarely,Often,Sometimes,Always,Always,Often,Often,Often,Sometimes,Sometimes,Always,The monitoring for failure is very difficult and needs more attention.,Usign large language model to generate more valid and invalid inputs.
87,Test Analyst/Tester/Test Engineer,,< 3,3-5 years,Sometimes,Sometimes,Often,Sometimes,Sometimes,Often,Sometimes,Rarely,Often,Rarely,Sometimes,Often,Rarely,Often,Often,Often,Rarely,Rarely,Often,Sometimes,Often,Sometimes,,
88,Technical Lead,,6-10 years,< 3,Often,Often,Sometimes,Never,Sometimes,Rarely,Never,Never,Never,Sometimes,Rarely,Never,Never,Sometimes,Often,Always,Rarely,Often,Never,Sometimes,Rarely,Never,"Fuzzers not available in target ISAs which leaders to fundamental differences in the fuzzed code which effectively makes that code not fuzzable.

Abstraction issues for embedded targets",Better selection of ISA support on industry standard tools
89,Developer,,3-5 years,< 3,Often,Often,Sometimes,Always,Often,Sometimes,Sometimes,Sometimes,Often,Sometimes,Often,Sometimes,Sometimes,Often,Often,Often,Sometimes,Often,Often,Sometimes,Sometimes,Sometimes,,
90,Others? Please specify.,Security Researcher,>10 years,>10 years,Often,Often,Always,Always,Sometimes,Often,Rarely,Rarely,Often,Sometimes,Rarely,Often,Rarely,Often,Often,Often,Always,Often,Sometimes,Often,Sometimes,Rarely,"Academic studies about fuzzing are nearly always lacking, or completely missing: how the results could be replicated, the fuzzer code, and/or documentation on how the tool/technique could be used for different targets.","Typical developer, doesn't have the skill set to analyze their code for interesting parts in the context of fuzzing. So fuzzing engineers end up doing a lot of work on analysing the target code and behavior. What I would like to see, and need, is a tool, or collection of tools, that could analyse the target behaviour and flag all typical constraints for fuzzing: I/O, wait loops, execution unstability etc.

Overall a tool that makes it easier to analyze the target for functionalities that often decrease fuzzing efficiency."
91,Others? Please specify.,Security Auditor,6-10 years,< 3,Often,Sometimes,Sometimes,Rarely,Sometimes,Rarely,Sometimes,Never,Often,Often,Sometimes,Never,Rarely,Sometimes,Always,Always,Often,Sometimes,Rarely,Always,Often,Rarely,"Fuzzing code that uses cryptography is extremely challenging. For example if the input contains a hash, MAC, signature, etc, the fuzzer's modifications will cause the MAC/signature checks to fail. So, to fuzz this code, the code that does these cryptographic checks needs to be modified so that it is deliberately ""weakened"" when the fuzzer is running.

A real-world example of this is trying to fuzz the peer-to-peer message handler of a cryptocurrency like Zcash or Bitcoin, almost all mutations to a valid transaction will be rejected by the p2p message handling code immediately because the hash/signatures are invalid, and none of the more-complex parsing logic is ever reached.","1. Reducing the set-up time to get a fuzzer running against a project, especially for code that runs weird environments like a cryptocurrency hardware wallet.

2. Often the application code needs to be changed so that the fuzzer can reach deeper, e.g. needing to disable cryptographic signature checks. Tools that make these modifications easier (without cluttering the actual application's code) would help."
92,Developer,,6-10 years,3-5 years,Rarely,Often,Rarely,Often,Rarely,Rarely,Rarely,Rarely,Sometimes,Rarely,Never,Never,Never,Never,Often,Sometimes,Rarely,Rarely,Sometimes,Often,Never,Sometimes,"The main challenges are the ability to fuzz code that need context. For instance, you want to fuzz what could be received by a server AFTER setting up the connection.","As with many technologies, it is difficult to anticipate its use from the beginning of the project and adapt the architecture so that the project is fuzzable.
People must be convinced that there is a real value in fuzzing a project."
93,Others? Please specify.,Security Engineer,< 3,3-5 years,Often,Often,Sometimes,Rarely,Often,Sometimes,Sometimes,Sometimes,Never,Sometimes,Rarely,Sometimes,Often,Sometimes,Often,Always,Always,Often,Often,Sometimes,Never,Always,,
94,Developer,,< 3,< 3,Sometimes,Sometimes,Sometimes,Often,Often,Rarely,Sometimes,Sometimes,Sometimes,Sometimes,Rarely,Sometimes,Rarely,Rarely,,,,,,,,,,
95,Technical Lead,,>10 years,6-10 years,Often,Often,Often,Often,Rarely,Often,Often,Often,Rarely,Rarely,Rarely,Rarely,Rarely,Often,Always,Sometimes,Sometimes,Rarely,Never,Rarely,Sometimes,Often,,
96,Sotware Architect,,>10 years,< 3,Sometimes,Never,Often,Never,,,,,,,,,,,,,,,,,,,,
97,Sotware Architect,,6-10 years,< 3,Rarely,Rarely,Sometimes,Often,Often,,,,,,,,,,,,,,,,,,,
98,Test Analyst/Tester/Test Engineer,,< 3,< 3,Rarely,Rarely,Often,Always,Always,,,,,,,,,,,,,,,,,,,
99,Others? Please specify.,Security Researcher,6-10 years,3-5 years,Sometimes,Rarely,Sometimes,Often,Often,Often,Sometimes,Sometimes,Sometimes,Sometimes,Sometimes,Often,Sometimes,Rarely,,,,,,,,,,
100,Technical Lead,,6-10 years,< 3,Sometimes,Sometimes,Sometimes,Rarely,Rarely,Often,Sometimes,Sometimes,Often,Sometimes,Sometimes,Sometimes,Rarely,Rarely,Sometimes,Rarely,Sometimes,Rarely,Rarely,Sometimes,Sometimes,Often,,
101,Others? Please specify.,Researcher,< 3,3-5 years,Rarely,Rarely,Often,Sometimes,Never,,,,,,,,,,,,,,,,,,,
102,Others? Please specify.,Researcher,< 3,< 3,Never,Never,Often,Often,Rarely,,,,,,,,,,,,,,,,,,,
103,Developer,,< 3,< 3,Often,Often,Rarely,Always,Always,Rarely,Rarely,Rarely,Sometimes,Sometimes,Rarely,Often,Always,Often,Sometimes,Never,Rarely,Often,Always,Rarely,Rarely,Rarely,"It would be great to get more literature on how the fuzzer works, especially how it exploits the results of instrumentation (in the case of instrumented code) and how the instrumentation can be improved.",More transparency and documentation on how the fuzzers concretely work would help the developers know what to do when the behavior is not as expected 
104,Technical Lead,,6-10 years,< 3,Sometimes,Sometimes,Sometimes,Rarely,Always,,,,,,,,,,,,,,,,,,,
105,Others? Please specify.,Security Engineer,3-5 years,< 3,Never,Never,Often,Sometimes,Often,Often,Rarely,Rarely,Rarely,Often,Rarely,Never,Often,Often,Often,Often,Often,Sometimes,Often,Always,Often,Often,,
106,Technical Lead,,>10 years,>10 years,Sometimes,Rarely,Sometimes,Sometimes,Often,,,,,,,,,,,,,,,,,,,

,Q1.1,Q1.1_5_TEXT,Q1.2,Q1.3,Q2.1.1_1,Q2.1.1_2,Q2.1.1_3,Q2.1.1_4,Q2.1.1_5,Q2.1.2_1,Q2.1.2_2,Q2.1.2_3,Q2.1.2_4,Q2.1.2_5,Q2.1.2_6,Q2.1.2_7,Q2.1.2_8,Q2.1.2_9,Q2.1.3_1,Q2.1.3_2,Q2.1.3_3,Q2.1.3_4,Q2.1.3_5,Q2.1.3_6,Q2.1.3_7,Q2.1.3_8,Q2.2,Q2.3
0,Which of the following roles describes you the best? - Selected Choice,Which of the following roles describes you the best? - Others? Please specify. - Text,How many years of professional experience of software development do you have?,How many years of experience of fuzzing do you have?,Please rate how often you encounter the following challenges during fuzzing. - Incompability between the fuzzing environment and the project leads to build failures.,Please rate how often you encounter the following challenges during fuzzing. - Different fuzzing environments lead to unstable/unreliable results.,Please rate how often you encounter the following challenges during fuzzing. - The fuzzer is missing desired functionalities/features.,"Please rate how often you encounter the following challenges during fuzzing. - The fuzzing process takes too much time or resources (e.g., memory, CPU, disk spaces).",Please rate how often you encounter the following challenges during fuzzing. - The fuzzer has scalability issues when facing large inputs/fuzzing targets/corpora.,Please rate how often you encounter the following challenges during fuzzing. - Bad fuzzing targets lead to fuzzing failures or inconsistent results.,Please rate how often you encounter the following challenges during fuzzing. - Issues with the fuzzing code lead to crashes/build failures.,Please rate how often you encounter the following challenges during fuzzing. - Bugs in the fuzzer lead to build failures or abnormal/inconsistent fuzzing behaviors.,Please rate how often you encounter the following challenges during fuzzing. - Incorrect use of the corpus leads to fuzzing failures or low coverage.,Please rate how often you encounter the following challenges during fuzzing. - Issues with the build tools or external dependencies lead to crash/build failures.,Please rate how often you encounter the following challenges during fuzzing. - Issues in the corpus lead to build failures or unreliable results.,"Please rate how often you encounter the following challenges during fuzzing. - Fuzzer inputs cause unusual crashes or issues (e.g., crashes or reboots the server).",Please rate how often you encounter the following challenges during fuzzing. - Issues when trying to save or re-use the corpus.,Please rate how often you encounter the following challenges during fuzzing. - Difficulties trying to reproduce build failures or bugs detected during fuzzing.,Please rate how often you encounter the following challenges during fuzzing. - Difficulties generating the correct inputs or targeting specific parts of the software.,"Please rate how often you encounter the following challenges during fuzzing. - Difficulties in setting up, building or using the fuzzer.",Please rate how often you encounter the following challenges during fuzzing. - Documentation on how to use the fuzzer is missing or insufficient.,Please rate how often you encounter the following challenges during fuzzing. - Output messages generated by the fuzzer are missing/confusing/unhelpful.,"Please rate how often you encounter the following challenges during fuzzing. - Overloading outputs lead to difficulties to focus on specific issues (e.g., too many bugs reported at once makes it difficult to focus on a specific issue).","Please rate how often you encounter the following challenges during fuzzing. - Bad code design limits the ability to fuzz (e.g., global variables being de-globalized in the source code can break the fuzzing code).",Please rate how often you encounter the following challenges during fuzzing. - Difficulties writing or understanding fuzzing code.,"Please rate how often you encounter the following challenges during fuzzing. - Difficulties in deciding which part of the software to fuzz (e.g., should legacy code be fuzzed, should all modules be fuzzed, etc...).","Please specify other challenges you have encountered during fuzzing, if not mentioned above. (optional)","How can the fuzzing process be improved (e.g., developing specialized tools, methodologies)? (optional)"
1,Technical Lead,,>10 years,< 3,Never,Never,Sometimes,Sometimes,Sometimes,Never,Never,Never,Never,Never,Never,Never,Never,Never,Rarely,Rarely,Rarely,Never,Never,Sometimes,Rarely,Rarely,lack of support of continuous fuzzing from ci systems,
2,Developer,,>10 years,6-10 years,Never,Never,Never,Never,Never,Never,Never,Rarely,Rarely,Never,Never,Never,Never,Rarely,Never,Never,Rarely,Never,Never,Rarely,Never,Never,I think Fuzzing is the easiest and most fool proof way of ensuring quality when programming in languages like C and C++.,I have nothing to offer here.
3,Developer,,>10 years,6-10 years,Often,Sometimes,Sometimes,Sometimes,Sometimes,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Never,Never,Sometimes,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Dealing with the volume of findings can be challenging,
4,Test Analyst/Tester/Test Engineer,,3-5 years,3-5 years,Rarely,Rarely,Rarely,Sometimes,Often,Rarely,Rarely,Rarely,Rarely,Rarely,Never,Never,Never,Rarely,Often,Rarely,Rarely,Rarely,Never,Often,Rarely,Sometimes,"Writing a good fuzz target is hard, because it requires domain knowledge ","Having a manual fuzz input editor, to allow developers with domain knowledge to smartly modify fuzz inputs to reach new code"
5,Others? Please specify.,Scientific researcher,< 3,< 3,Rarely,Never,Rarely,Often,,Rarely,,Always,Rarely,Sometimes,,Never,Never,Sometimes,Often,Sometimes,Sometimes,Sometimes,Rarely,,Never,Rarely,,
6,Technical Lead,,>10 years,6-10 years,Never,Never,Rarely,Rarely,,Rarely,Never,Never,Rarely,Never,Never,Never,Rarely,Sometimes,Sometimes,Never,Never,Never,Never,Sometimes,Rarely,Never,,integration in build tools and/or IDEs would probably be helpful.
7,Developer,,>10 years,3-5 years,Rarely,Rarely,Sometimes,Sometimes,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Rarely,Never,Never,Rarely,Sometimes,Rarely,Sometimes,Rarely,Sometimes,Sometimes,Rarely,Sometimes,,"documentation, examples"
8,Developer,,3-5 years,3-5 years,Sometimes,Sometimes,Never,Sometimes,Sometimes,Never,Never,Never,Never,Sometimes,Rarely,Never,Never,Never,Sometimes,Sometimes,Rarely,Rarely,Never,Sometimes,Rarely,Rarely,,
9,Developer,,3-5 years,< 3,Never,,Rarely,,Rarely,,,,,,,,,,,,,,,,,,,
10,Developer,,6-10 years,< 3,Sometimes,Never,Often,Sometimes,Sometimes,Often,Sometimes,Never,Rarely,Rarely,Rarely,Never,Never,Sometimes,Sometimes,Rarely,Never,Sometimes,Rarely,Often,Often,Rarely,,
11,Developer,,>10 years,3-5 years,Often,Often,Rarely,Rarely,Rarely,Rarely,Never,Never,Sometimes,Never,Never,Never,Sometimes,Often,Sometimes,Sometimes,Sometimes,Often,Rarely,Sometimes,Rarely,Sometimes,,
12,Technical Lead,,>10 years,>10 years,Sometimes,Often,Rarely,Sometimes,Always,Sometimes,Rarely,Often,Rarely,Sometimes,Rarely,Never,Often,Rarely,Rarely,Often,Rarely,Sometimes,Rarely,Rarely,Rarely,Never,"With afl, I end up having to start from scratch every cycle. It would be nice if it were easier to minimize while Iâ€™m fixing issues and then have a fast start based on the previous cycle. Plus I sometimes have to recompile to work with other tools, like valgrind or gdb ","background minimization

fast start based on previous cycle

more porcelain tooling, we just get the plumbing today and I have a bunch of ad hoc support scripts now"
13,Developer,,>10 years,6-10 years,Sometimes,Sometimes,Sometimes,Often,Often,,Sometimes,Rarely,Sometimes,Sometimes,Sometimes,Sometimes,Sometimes,Rarely,Always,Sometimes,Sometimes,Sometimes,Sometimes,Never,Sometimes,Often,,"Allocating time and resources for continued fuzzing is difficult; ideally tooling would make it easy for e.g. all developers on a project to contribute to fuzzing at a low-level, rather than occupying dedicated machines for brief but intense periods of fuzzing.  Aside from other usability issues, that seems to be a central problem of implementing fuzzing: after it is initially implemented, it often doesn't get run regularly.

It would also be nice to have some intersection with coverage metrics -- some tools probably have this now, but I haven't seen it in practice myself -- so the tooling could suggest interfaces that could be fuzzed; for example, places in the code where network input is read but which haven't already been covered by the existing fuzzing code."
14,Developer,,3-5 years,< 3,Sometimes,Rarely,Rarely,Always,Always,Sometimes,Always,Always,Rarely,Often,Never,Never,Sometimes,Often,Rarely,Always,Always,Sometimes,Never,Never,Never,Often,,
15,Technical Lead,,>10 years,6-10 years,Sometimes,Rarely,Rarely,Never,Rarely,Never,Never,Never,Rarely,Often,Never,Rarely,Rarely,Rarely,Often,Often,Often,Rarely,Sometimes,Sometimes,Rarely,Rarely,,"joining the unit test frameworks with fuzzing.

for instance, adding a unit test, marking one parameter as fuzzable. the framework could then run that ""unit test"" with a fuzzer.
that would lower the barrier for developers to join in on fuzzing, instead of having dedicated persons writing fuzzers."
16,Technical Lead,,>10 years,3-5 years,Often,Often,Often,Often,Often,Rarely,Rarely,Rarely,Rarely,Sometimes,Rarely,Rarely,Sometimes,Sometimes,Always,Always,Always,Often,Often,Rarely,Often,Often,"Cross platform use of fuzzers. E.g. if a development team primarily targets windows, the available fuzzing tools for windows are very lacking and hard to use.",
17,Test Analyst/Tester/Test Engineer,,< 3,< 3,Rarely,Sometimes,Sometimes,Rarely,Sometimes,,,,,,,,,,,,,,,,,,,
18,Others? Please specify.,security researcher,>10 years,3-5 years,Often,Sometimes,Sometimes,Sometimes,Always,Often,Sometimes,Sometimes,Sometimes,Often,Often,Often,Often,Often,Often,Sometimes,Sometimes,Sometimes,Often,Often,Often,Often,"replicating crashes is a major issue.
triaging them is another big issue.","need better crash triage tools.
need fuzzers which incorporates latest tools and techniques like symbolic fuzzing etc.
platform independent fuzzing"
19,Developer,,>10 years,< 3,Rarely,Sometimes,Often,Sometimes,Rarely,Sometimes,Rarely,Sometimes,Sometimes,Sometimes,,Rarely,,Sometimes,Often,Often,Often,Sometimes,Rarely,Rarely,Sometimes,Rarely,,"When an issue is detected, I would love to see the minimal standalone code example with minimal dependencies to recreate it. "
20,Developer,,>10 years,< 3,Sometimes,Often,Often,Always,Often,Often,Sometimes,Rarely,Rarely,Often,Rarely,Rarely,Rarely,Often,Often,Often,Often,Sometimes,Rarely,Often,Rarely,Always,,
21,Developer,,6-10 years,3-5 years,Rarely,Never,Rarely,Sometimes,Sometimes,,Rarely,Rarely,,Rarely,,Never,Never,Sometimes,Sometimes,Often,Rarely,Sometimes,Rarely,Never,Sometimes,Rarely,,
22,Developer,,>10 years,< 3,Sometimes,Sometimes,Rarely,Often,Sometimes,Sometimes,Rarely,Never,Sometimes,Rarely,Never,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Sometimes,Sometimes,,,Rarely,,
23,Technical Lead,,6-10 years,< 3,Often,Rarely,Often,Sometimes,Rarely,Rarely,Rarely,Rarely,Sometimes,Often,Rarely,Often,Rarely,Rarely,Often,Often,Often,Sometimes,Rarely,Often,Always,Always,,
24,Technical Lead,,>10 years,>10 years,Rarely,Sometimes,Often,Often,Often,Sometimes,Rarely,Sometimes,Often,Sometimes,Rarely,Rarely,Rarely,Rarely,Sometimes,Sometimes,Often,Sometimes,Often,Sometimes,Sometimes,Sometimes,,
25,Others? Please specify.,bug hunter,6-10 years,3-5 years,Sometimes,Often,Rarely,Always,Always,Often,Rarely,Rarely,Always,Always,Always,Never,Often,Often,Always,Sometimes,Rarely,Never,Rarely,Never,Never,Rarely,"You are try to fuzz open source softwares. I also write fuzzer for closed-source softwares. There are many different things. Writing a harness for a closed-source software (or library, for example: .so or .dll) is very challenging.",
26,Others? Please specify.,Penetration Tester,6-10 years,3-5 years,Often,Always,Sometimes,Rarely,Often,Rarely,Sometimes,Rarely,Sometimes,Sometimes,Sometimes,Often,Rarely,Rarely,Always,Always,Always,Often,,,Rarely,Never,Fuzzing involves getting build systems to work. Build systems are the devil.,"The main problem is, how do we find higher level bugs when the memory corruption rain dries up?"
27,Others? Please specify.,other,6-10 years,3-5 years,Sometimes,Sometimes,Often,Often,Always,Always,Sometimes,Rarely,Often,Rarely,Never,Sometimes,Never,Often,Always,Rarely,Sometimes,Sometimes,Often,Sometimes,Rarely,Often,,"developing specialized tools, structure-aware fuzzing"
28,Others? Please specify.,Security researcher,6-10 years,3-5 years,Sometimes,Rarely,Sometimes,Sometimes,Rarely,Rarely,Rarely,Sometimes,Often,Never,Never,Never,Never,Often,Always,Rarely,Sometimes,Rarely,Often,Often,Always,Often,"cannot reproduce fuzzing target's crash (need more work for triaging phase), specific fuzzer component's documentation is not provided",developing specialized tools (in many cases)
29,Others? Please specify.,All of the above,>10 years,6-10 years,Often,Sometimes,Always,Rarely,Sometimes,Often,Sometimes,Sometimes,Often,Sometimes,Sometimes,Rarely,Rarely,Rarely,Often,Sometimes,Sometimes,Rarely,Rarely,Rarely,Sometimes,Sometimes,,
30,Developer,,>10 years,< 3,Sometimes,Sometimes,Sometimes,Sometimes,Sometimes,Sometimes,Never,Never,Often,Never,Never,Never,Rarely,Rarely,Sometimes,Sometimes,Often,Sometimes,Never,Rarely,Often,Often,,
31,Developer,,>10 years,< 3,Never,Never,Rarely,Often,Rarely,Rarely,Rarely,Never,Sometimes,Never,Never,Never,Never,Rarely,Sometimes,Rarely,Often,Sometimes,,Often,Sometimes,Sometimes,,Integration of fuzzing with the environment (like Go has done) is key to increasing its adoption and ease of use.
32,Others? Please specify.,Vulnerability Researcher,>10 years,< 3,Always,Often,Sometimes,Sometimes,Sometimes,Rarely,Never,Sometimes,Rarely,Always,Rarely,Sometimes,Often,Often,Sometimes,Rarely,Sometimes,Rarely,Often,Never,Never,Sometimes,,
33,Developer,,6-10 years,< 3,Rarely,Sometimes,Often,Often,Often,Rarely,Rarely,Rarely,Sometimes,Rarely,Sometimes,Often,Sometimes,Sometimes,Sometimes,Often,Often,Sometimes,Rarely,Often,Rarely,Often,,
34,Others? Please specify.,Security Researcher,6-10 years,3-5 years,Often,Rarely,Sometimes,Sometimes,Rarely,Often,Rarely,Rarely,Rarely,Often,Rarely,Often,Rarely,Sometimes,Always,Often,Sometimes,Rarely,Never,Often,Never,Rarely,'- Fuzzing stateful protocols,"'- LibAFL! A high-quality framework for fuzzing solves a lot of the challenges, like reproducibility, scalability. Example usage: https://github.com/tlspuffin/tlspuffin"
35,Developer,,6-10 years,3-5 years,Often,Sometimes,Rarely,Rarely,Rarely,Often,Often,Rarely,Never,Often,Sometimes,,Rarely,Rarely,Rarely,Sometimes,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,,
36,Developer,,6-10 years,3-5 years,Never,,Rarely,Never,Sometimes,,Never,,Often,Rarely,Never,Rarely,Never,Never,Sometimes,Never,Rarely,Rarely,Sometimes,Never,Never,Never,"Improvements made by academia not reaching production - e.g. https://arxiv.org/abs/1803.01307 and https://github.com/AngoraFuzzer/Angora only targets an old LLVM version, making it nearly unusable in practice.","In statically typed, memory-safe languages (Rust, Java, etc) it should be possible to auto-generate fuzzing harnesses for large API surfaces, where it is impractical to write fuzzing targets by hand.
This in turn opens the door for fuzzing C/C++ libraries with large API surfaces through their Rust bindings. OpenSSL's API surface could be easily fuzzed that way.

I've experimented with this in https://github.com/rust-fuzz/auto-fuzz-test but didn't get it to a production-ready state. https://sat-group.github.io/ruben/media/pldi21-syrust.pdf which took a more sophisticated approach also never reached production."
37,Developer,,>10 years,3-5 years,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Rarely,Never,Sometimes,Always,Rarely,Rarely,Rarely,Sometimes,Rarely,Rarely,Never,Never,Rarely,Often,Rarely,Often,,
38,Technical Lead,,>10 years,3-5 years,Rarely,Rarely,Often,Sometimes,Sometimes,Rarely,Rarely,Rarely,Often,Rarely,Rarely,Rarely,Rarely,Sometimes,Often,Sometimes,Rarely,Rarely,Rarely,Sometimes,Rarely,Sometimes,,
39,Sotware Architect,,>10 years,< 3,Often,Often,Often,Sometimes,Sometimes,Sometimes,Often,Rarely,Rarely,Often,Rarely,Rarely,Sometimes,Often,Sometimes,Always,Rarely,Sometimes,Always,Sometimes,Often,Rarely,Build is the problem.,
40,Technical Lead,,6-10 years,6-10 years,Rarely,Sometimes,Always,Always,Sometimes,,,,,,,,,,,,,,,,,,,
41,Technical Lead,,6-10 years,3-5 years,Sometimes,Often,Sometimes,Rarely,Rarely,Often,Often,Sometimes,Often,Sometimes,Often,Sometimes,Sometimes,Rarely,,,,,,,,,,
42,Technical Lead,,>10 years,3-5 years,Often,Sometimes,Sometimes,Sometimes,Sometimes,,,,,,,,,,,,,,,,,,,
43,Technical Lead,,>10 years,3-5 years,Rarely,Rarely,Often,Often,Sometimes,Often,Often,Sometimes,Rarely,Sometimes,Rarely,Sometimes,Never,Often,Sometimes,Often,Never,Never,Rarely,Often,Sometimes,Sometimes,"Difficulty fuzzing internal boundaries in software (in our product, we assume attacker might successfully take over part of the product, but we still don't want them to reach other parts, so fuzzing these internal boundaries is crucial). Reason: monolithic design, assumptions about intended behavior","Trivial integration of snapshot fuzzing into coverage-guided, simple-to-write fuzzers along the lines of libfuzzer"
44,Technical Lead,,>10 years,>10 years,Sometimes,Often,Sometimes,Often,Rarely,Always,Sometimes,Sometimes,Often,Rarely,Rarely,Often,Never,Often,Often,Rarely,Rarely,Rarely,Sometimes,Always,Rarely,Always,"We develop most of our fuzzing tools ourselves, so our main issues is with the target code, not the fuzzer itself. The main issues are:

* Insufficient segmentation/separation of the target code (cannot easily carve out parts to test, many tests must be done on the full system)
* Fuzzing finds low priority edge cases that have no priority for developers but also block the fuzzing process (in particular pathological OOMs are an issue).
* Guided instrumentation from tools like libFuzzer cannot be restricted at runtime. With a huge codebase, a specific fuzzer can easily be mislead into the ""wrong"" target code.",* Runtime target selection for coverage guided tools would be a great improvement
45,Technical Lead,,6-10 years,< 3,Often,Often,Often,Rarely,Sometimes,,,,,,,,,,,,,,,,,,,
46,Developer,,6-10 years,< 3,Often,Rarely,Sometimes,Always,Always,Sometimes,Sometimes,Sometimes,Rarely,Sometimes,Sometimes,Rarely,Often,Often,,,,,,,,,,
47,Developer,,>10 years,6-10 years,Often,Often,Rarely,Sometimes,Rarely,,Rarely,Never,Sometimes,Rarely,Sometimes,Never,Rarely,Rarely,Sometimes,Rarely,Sometimes,Rarely,Never,Never,Rarely,Rarely,,
48,Developer,,>10 years,3-5 years,Rarely,Rarely,,Never,,,,,,,,,,,,,,,,,,,,
49,Developer,,>10 years,3-5 years,Sometimes,Sometimes,Often,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Rarely,Rarely,Sometimes,Rarely,Rarely,,,,,,,,,,
50,Developer,,3-5 years,< 3,Rarely,Sometimes,Sometimes,Often,Often,Sometimes,Rarely,Never,Often,Rarely,Often,Never,,,Always,Often,Sometimes,Rarely,Often,Sometimes,Rarely,Rarely,,
51,Developer,,6-10 years,< 3,Rarely,Rarely,Often,Rarely,Rarely,Rarely,Rarely,Rarely,Sometimes,Never,Never,Never,Sometimes,Sometimes,Often,Sometimes,Sometimes,Sometimes,Rarely,Rarely,Sometimes,Often,,
52,Others? Please specify.,Academic researcher,3-5 years,3-5 years,Often,Often,Sometimes,Rarely,Rarely,,,,,,,,,,,,,,,,,,,
53,Developer,,>10 years,< 3,Often,Often,Often,Sometimes,Sometimes,,,,,,,,,,,,,,,,,,,
54,Others? Please specify.,Security Engineer / Researcher,>10 years,6-10 years,Sometimes,Sometimes,Rarely,Rarely,Sometimes,,,,,,,,,,,,,,,,,,,
55,Developer,,3-5 years,< 3,Often,Often,Often,Often,Rarely,,,,,,,,,,,,,,,,,,,
56,Others? Please specify.,security researcher,< 3,< 3,Often,Always,Always,Always,Always,,,,,,,,,,,,,,,,,,,
57,Developer,,< 3,< 3,Often,Sometimes,Sometimes,Often,Always,,,,,,,,,,,,,,,,,,,
58,Technical Lead,,>10 years,< 3,Rarely,Never,Never,Never,Never,Never,Never,Never,Never,Sometimes,Never,Never,Never,Rarely,Rarely,Rarely,Rarely,Never,Never,Never,Rarely,Often,,Guidance on which parts of the software to fuzz would be very helpful. 
59,Others? Please specify.,engineering manager,>10 years,< 3,Always,,Always,Rarely,Often,,,,,,,,,,,,,,,,,,,
60,Developer,,3-5 years,< 3,Never,Never,Always,Always,Always,,,,,,,,,,,,,,,,,,,
